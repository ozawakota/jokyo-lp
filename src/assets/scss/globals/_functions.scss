/*
 * 関数定義用ファイル
 */
@use 'variables' as *;
@use 'sass:math';

// $default-min-bp: 375px;
// $default-max-bp: 1280px;
// $root-font-size: 16px;

// font-size: to-rem(16px) -> 1rem
@function to-rem($px) {
  $rem: math.div($px, $root-font-size) * 1rem;
  @return $rem;
}

// font-size: to-em(16px, 32px) -> 0.5em
@function to-em($px, $self-px: $root-font-size) {
  $em: math.div($px, $self-px) * 1em;
  @return $em;
}

@function fluid-size(
  $min-px,
  $max-px,
  $min-bp: $default-min-bp,
  $max-bp: $default-max-bp
) {
  $slope: math.div($max-px - $min-px, $max-bp - $min-bp);
  $slope-vw: $slope * 100;
  $intercept-rems: to-rem($min-px - $slope * $min-bp);
  $min-rems: to-rem($min-px);
  $max-rems: to-rem($max-px);
  @return clamp(
    #{$min-rems},
    #{$slope-vw}vw + #{$intercept-rems},
    #{$max-rems}
  );
}

// --------------------------------------------
// 機能：画面幅に合わせて文字サイズを調整する
//      （最大値をPC版のフォントサイズ、最小値をSP版のフォントサイズとする）
// 引数：$pcSize    PC版のフォントサイズ
//      $spSize    SP版のフォントサイズ
// 注意：getPcVw()とgetSpVw()関数の$viewportの値をデザインデータに合わせること
// --------------------------------------------

@function vwPC($num, $width) {
  @return 100vw * calc($num / $width);
}

@function vwSP($num) {
  @return 100vw * calc($num / 375);
}

@function contWidth($num, $base) {
  // パーセンテージ
  @return calc($num / $base) * 100%;
}
